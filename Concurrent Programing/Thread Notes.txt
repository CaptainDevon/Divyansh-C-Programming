Q)What is Thread?
A)It is a lightweight process. The idea is to achieve paralellism
  by dividing a process into multiple threads.
  examples:
  a)The web browser having multiple tabs are running parallell having
    multiple threads.
  b)MS word must be using multiple threads, one thread for formating text
    another for processing inputs like spell checking indentation etc.
  c)Visual Studio code editor using threads for auto completion of the code 

Q)Ways of creating the thread?
A)There are 5 ways of creating the thread;
    1)Function pointors --> std::thread t(func,arg1,agr2..)
    2)Lambda functions  --> std::thread t([](//arguments){//function defination},arg1,arg2..)
    3)functors -->  std::thread t((class 'operator'),args...);
    4)non static Member function --> std::thread t(&Class::memberFunction,&Object,args..)
    5)static Member functions  --> std::thread t(&Class::memberFunction,args...)


Q)Use of join(), detach() and joinable() in c++ thread
A)1)JOIN NOTES:
        a)Once a thread is started we wait for this thread to finish
          by calling join() function on thread Object.
        
        b)Double join will result in program termination

        c)If needed we should check thread is joinable before joining.

    DETACH NOTES:
        a)This is used to detach newly created thread from the parent thread.

        b)Always check before detaching a thread that it is joinable otherwise
          may end up double detaching and result into program termination.
        
        c)If we have detached thread and main function is returning then the detached
          thread execution is suspended

    CAUTION:
    Either join() or detach() should be called on the thread object, otherwise thread
    objects destructor it will terminate the program. Because inside destructor it checks 
    it checks fi thread is still joinable or not? if yes program terminates




MUTEX In c++ THreading 

MUTEX-->Mutual Exclusion

It is used for doing following things:
1)Race Condition:
  -->Race Condition is a situation where two or more thread/process happend to change a common 
     data at the same time 

  -->If there is any race condition then we have to protect it and that protected section is 
     calles critical section
 2)We use lock(), unlock() on mutex to avoid race condition



std::mutex::try_lock()

-->try_lock() tries to lock the mutex. Returns immediatly. on sucessful lock acquisition returns 
   otherwise return false
-->If try_lock() is not abel to lock the mutex ,then it doesnt get blocked : hence it is called as non-blocking
-->If try_lock() is called again by the same thread which owns the mutex, the behaviour is undefined 
    **This situation is called as the dead lock**

There are total 9 try_lock() functions
1. std::try_lock
2. std::mutex::try_lock
3. std::shared_lock::try_lock
4. std::timed_mutex::try_lock
5. std::unique_lock::try_lock
6. std::shared_mutex::try_lock
7. std::recursive_mutex::try_lock
8. std::shared_timed_mutex::try_lock
9. srd::recursive_timed_mutex::try_lock


