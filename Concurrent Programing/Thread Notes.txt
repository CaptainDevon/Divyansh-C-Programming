Q)What is Thread?
A)It is a lightweight process. The idea is to achieve paralellism
  by dividing a process into multiple threads.
  examples:
  a)The web browser having multiple tabs are running parallell having
    multiple threads.
  b)MS word must be using multiple threads, one thread for formating text
    another for processing inputs like spell checking indentation etc.
  c)Visual Studio code editor using threads for auto completion of the code 

Q)Ways of creating the thread?
A)There are 5 ways of creating the thread;
    1)Function pointors --> std::thread t(func,arg1,agr2..)
    2)Lambda functions  --> std::thread t([](//arguments){//function defination},arg1,arg2..)
    3)functors -->  std::thread t((class 'operator'),args...);
    4)non static Member function --> std::thread t(&Class::memberFunction,&Object,args..)
    5)static Member functions  --> std::thread t(&Class::memberFunction,args...)


Q)Use of join(), detach() and joinable() in c++ thread
A)1)JOIN NOTES:
        a)Once a thread is started we wait for this thread to finish
          by calling join() function on thread Object.
        
        b)Double join will result in program termination

        c)If needed we should check thread is joinable before joining.

    DETACH NOTES:
        a)This is used to detach newly created thread from the parent thread.

        b)Always check before detaching a thread that it is joinable otherwise
          may end up double detaching and result into program termination.
        
        c)If we have detached thread and main function is returning then the detached
          thread execution is suspended

    CAUTION:
    Either join() or detach() should be called on the thread object, otherwise thread
    objects destructor it will terminate the program. Because inside destructor it checks 
    it checks fi thread is still joinable or not? if yes program terminates




MUTEX In c++ THreading 

MUTEX-->Mutual Exclusion

It is used for doing following things:
1)Race Condition:
  -->Race Condition is a situation where two or more thread/process happend to change a common 
     data at the same time 

  -->If there is any race condition then we have to protect it and that protected section is 
     calles critical section
 2)We use lock(), unlock() on mutex to avoid race condition



std::mutex::try_lock()

-->try_lock() tries to lock the mutex. Returns immediatly. on sucessful lock acquisition returns 
   otherwise return false
-->If try_lock() is not abel to lock the mutex ,then it doesnt get blocked : hence it is called as non-blocking
-->If try_lock() is called again by the same thread which owns the mutex, the behaviour is undefined 
    **This situation is called as the dead lock**

There are total 9 try_lock() functions
1. std::try_lock
2. std::mutex::try_lock
3. std::shared_lock::try_lock
4. std::timed_mutex::try_lock
    std::timed_mutex is blocked till timeout_time or the lock is aquired and returns true if sucess
    otherwise false.

    Its member functions are 
    1)lock
    2)try_lock
    3)try_lock_for
    4)try_lock_until
    5)unlock


    std::try_lock_for 
    -->waits untill specified timeout duration has elapsed or the lock is aquired, whichever comes first
    -->returns true false


5. std::unique_lock::try_lock

    std::unique_lock<mutex>lock(m1)

    1)The class unique_lock is the ownership wrapper
    2)It allows:
      -->different locking strategies 
      -->time constrained attempts at locking (try_lock_for,try_lock_until)
      -->recursive locking
      -->transfer of lock ownership
      -->condition variables

          Used for two purposes:
          A)Notify other threads
          B)Waiting for some condition
          C)synchronize two or more threads
          D)best use case is producer/consumer problem

          1)Condition variable allows running threads to wait on some condition and once those 
            conditions are mt thread is notified using 
            -->notify_one();
            -->notify_all();
          2)Required mutex to use condition variable
          3)If some thread want to wait on some condition then it has to fo these things;
            -->acquire mutex lock
            -->execute wait,wait_for,wait_untill  [wait operation release the mutex and suspent the thread execution]
            -->when condition variable is notified , the thread is awakened and mutex is reacquired automatically
               The thread should then check the condition and resume waiting if wake up was spurious



    Locking strategies:
    1)defer_lock  : Doesn't acquire ownership of the mutex
    2)try_to_lock : try to acquire ownership of mutex without blocking
    3)adopt_lock  : assume the calling thread already has ownership of the mutex


6. std::shared_mutex::try_lock
7. std::recursive_mutex::try_lock

    1) It is same as mutex but in this the same thread can lock one mutex multiple times 
    2) Suppose if a thread t1 calls lock/try_lock() on recursive mutex m1 , then m1 is locked by t1
       now when t1 is running in recursion it can call m1 as many time as it wants during recursion process 
    3) Suppose t1 calls m1 10 times then it must be unlocked 10 time so hat other threads can acquire the lock 
       In short the recursive mutex keeps the count of the loock aquired by the same thread
    4) In general there is no limit defined for the recursive call but if it is defined and limit reaches we get error
       or the lock is aquired 
    5) it can be used in loops


8. std::shared_timed_mutex::try_lock
9. srd::recursive_timed_mutex::try_lock


Lock Guard in c++
std::lock_guard<mutex> lock(m1)
1)It is very light weight  wrapper for owning mutex on scoped basis
2)It aquires mutex lock the moment you create the lock guard object 
3)It automatically removes the lock while goes out of the scope 
4)You cannot explicitly unlock the lock the lock guard 
5)You cannot copy the lock guard




std::future and std::promise in threading 

1)std::promise 
    -->used to set values or exceptions
2)std::future
    -->fetches values from promise
    -->asks promise if value is available or not
    -->wait for the promise


std::async

1) It runs a functions asynchronously (potentially in a new thread) return 
   std::future that will hold the result
  
2) There are three launch policies for creating task 
    a)std::launch::async
    b)std::launch::deffered
    c)std::launch::async | std::launch::async


-->HOW IT WORKS
  --> It automaticall creates a thread (or picks from internal thread pool) 
      and a promise object for us 

  --> Then passes the std::promise object to thread function and returns the 
      associated std::future object
  
  --> When our passed argument function exits then its value will be set in 
      promise object sot return value will be available in the future object

  -->we use unctor and lambda function as callback to async to std::async, it will
     work the same

